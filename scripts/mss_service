#!/usr/bin/env python3

import datetime
import getpass
import gzip
import json
import logging
import os
import shutil
import sys

import click
import obspy
import paramiko

import mss_service.core.check
import mss_service.core.util


@click.group()
def cli():
    ''' The command line interface entry point.

    '''
    # Create the logger instance.
    logger_name = 'mss_service'
    logger = logging.getLogger(logger_name)
    # Set the common log level to debug. The log level is refined for each handler.
    logger.setLevel('DEBUG')

    # Create a logger logging to stdout. Used for output of warnings and errors.
    handler = mss_service.core.util.get_logger_stream_handler(log_level = 'INFO')
    logger.addHandler(handler)


@cli.command()
@click.option('--save-log',
              help = "Copy the mss_record log file.",
              is_flag = True)
@click.option('--n-loglines',
              help = 'The number of mss_record log lines to show in the summary.',
              default = 30)
def check(save_log, n_loglines):
    ''' Check the state of the MSS.

    '''
    logger_name = 'mss_service.check'
    logger = logging.getLogger(logger_name)
    check_state(logger = logger,
                save_log = save_log,
                n_loglines = n_loglines)


@cli.command()
@click.argument('serial')
def set_serial(serial):
    ''' Set the serial number of the MSS.
    '''
    mss_host = '192.168.33.1'
    username = 'mss'
    
    logger_name = 'mss_service.set-serial'
    logger = logging.getLogger(logger_name)

    serial_filepath = '/home/mss/config/mss_serial'

    password = getpass.getpass('Password:')

    logger.info("Connecting to the MSS using ssh.")
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(mss_host,
                    username = username,
                    password = password,
                    look_for_keys = False,
                    allow_agent = False,
                    timeout = 2)
    except Exception:
        logger.exception("Error connecting to the MSS. Quit program execution.")
        sys.exit(0)
        
    try:
        logger.info("Setting the MSS serial to %s.", serial)
        cmd = 'chmod u+w {:s}'.format(serial_filepath)
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd)
        cmd = 'echo "{serial:s}" > {filepath:s}'.format(serial = serial,
                                                        filepath = serial_filepath)
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd)
        cmd = 'chmod u-w {:s}'.format(serial_filepath)
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd)

        cmd = 'cat {:s}'.format(serial_filepath)
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd)
        response = ssh_stdout.readlines()
        if len(response) != 1:
            logger.error('Error in the mss_serial file:\n%s', response)
        else:
            logger.info('Changed the MSS serial to %s.', response[0].strip())
    finally:
        ssh.close()

@cli.command()
def reboot():
    ''' Reboot the MSS.
    '''
    mss_host = '192.168.33.1'
    username = 'mss'
    
    logger_name = 'mss_service.set-serial'
    logger = logging.getLogger(logger_name)

    password = getpass.getpass('Password:')

    logger.info("Connecting to the MSS using ssh.")
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(mss_host,
                    username = username,
                    password = password,
                    look_for_keys = False,
                    allow_agent = False,
                    timeout = 2)
    except Exception:
        logger.exception("Error connecting to the MSS. Quit program execution.")
        sys.exit(0)

    try:
        logger.info("Rebooting the MSS.")
        cmd = 'sudo shutdown -r now'.format(password)
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd,
                                                             get_pty = True)
        ssh_stdin.write(password + '\n')
        ssh_stdin.flush()

        err_msg = ssh_stderr.readlines()
        if not err_msg:
            logger.info("Successfully rebooted the MSS.")
        else:
            logger.info("It seems that there has been a problem rebooting the MSS.\n%s", err_msg)
    finally:
        ssh.close()


def check_state(logger, save_log = False, n_loglines = 20):
    mss_host = '192.168.33.1'
    username = 'mss'

    check_date = obspy.UTCDateTime.now()
    mss_state = mss_service.core.util.AttribDict()
    mss_state.summary = mss_service.core.util.AttribDict()
    mss_state.details = mss_service.core.util.AttribDict()
    mss_state.log = mss_service.core.util.AttribDict()
    mss_state.summary.check_date = check_date.isoformat()

    password = getpass.getpass('Password:')

    logger.info("Connecting to the MSS using ssh.")
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(mss_host,
                    username = username,
                    password = password,
                    look_for_keys = False,
                    allow_agent = False,
                    timeout = 2)
    except Exception:
        logger.exception("Error connecting to the MSS. Quit program execution.")
        sys.exit(0)

    try:
        mss_serial = mss_service.core.check.check_serial(ssh = ssh,
                                                         logger = logger)
        mss_state.summary.serial = mss_serial
        logger.info("Successfully connected to the MSS {serial:s}.".format(serial = mss_serial))

        # Check for NTP.
        npt_is_working, response = mss_service.core.check.check_ntp(ssh = ssh,
                                                                    logger = logger)
        mss_state.summary.ntp_is_working = npt_is_working
        mss_state.details.ntp_state = response

        # Check for datalink connection.
        datalink_connected, response = mss_service.core.check.check_datalink(ssh = ssh,
                                                                             logger = logger)
        mss_state.summary.datalink_connected = datalink_connected
        mss_state.details.ss_output = response

        # Check the mss_record service.
        mssr_is_running = mss_service.core.check.check_mss_record_service(ssh = ssh,
                                                                          logger = logger)
        mss_state.summary.mssr_is_running = mssr_is_running

        # Check for recent update of the miniseed data file.
        mseed_updated, recent_files = mss_service.core.check.check_datafiles(ssh = ssh,
                                                                             logger = logger)
        mss_state.summary.mseed_updated = mseed_updated
        mss_state.details.recent_datafiles = recent_files
        
        # Get the version info.
        version_info = mss_service.core.check.get_version_info(ssh = ssh,
                                                               logger = logger)
        mss_state.details.version_info = version_info

        # Get the software configuration info.
        config_info = mss_service.core.check.get_config_info(ssh = ssh,
                                                             logger = logger)
        mss_state.config = config_info

        # Get the latest mss_record log file entries.
        log_tail = mss_service.core.check.get_mss_log_tail(ssh = ssh,
                                                           logger = logger,
                                                           n_lines = n_loglines)
        mss_state.log.mss_record = log_tail

        # Save the state to a json file.
        output_dir = os.path.join(os.path.join(os.path.expanduser('~')),
                                  'Schreibtisch',
                                  'mss_service')
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        # Save the state to a json file.
        date_str = check_date.strftime('%Y%m%dT%H%M%S')
        output_filename = "mss_service_{date:s}_{serial:s}_state.json".format(date = date_str,
                                                                              serial = mss_serial)
        output_filepath = os.path.join(output_dir,
                                       output_filename)
        with open(output_filepath, 'w') as json_file:
            json.dump(mss_state,
                      json_file,
                      indent = 4)
        logger.info("Wrote the detailed MSS service information to file %s.",
                    output_filepath)

        if save_log:
            # Copy the log file.
            src_path = '/home/mss/log/mss_record.log'
            dst_filename =  "mss_service_{date:s}_{serial:s}_log.txt".format(date = date_str,
                                                                             serial = mss_serial)
            dst_path = os.path.join(output_dir,
                                    dst_filename)

            logger.info("Copy the MSS log file to %s.", dst_path)
            sftp_client = ssh.open_sftp()
            try:
                sftp_client.get(src_path,
                                dst_path)
                # Compress the log file.
                out_filepath = dst_path + '.gz'
                with open(dst_path, 'rb') as in_file:
                    with gzip.open(out_filepath, 'wb') as out_file:
                        shutil.copyfileobj(in_file, out_file)

                os.remove(dst_path)
            except Exception:
                logger.exception("Error copying the log file.")
            finally:
                sftp_client.close()

        logger.info("################ MSS LOG FILE ##############")
        logger.info("Last mss_record log entries:\n    >>> %s",
                    '    >>> '.join(mss_state.log.mss_record))

        logger.info("################ SUMMARY ##############")
        logger.info("MSS Service State Summary:\n%s",
                    json.dumps(mss_state.summary,
                               indent = 4))
                    
        
    finally:
        ssh.close()


if __name__ == '__main__':
    cli()
